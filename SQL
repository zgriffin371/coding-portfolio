use employees; # employees database is in the comments section

### QUERY 1 ###

# For the SELECT statement, the aggregate function (avg) is modifed for easier readability

SELECT ROUND(AVG(s.salary),2) AS Average_Salary, e.gender, d.dept_name
FROM salaries s
		
#Since 'departments' doesn't have the primary key 'emp_no', an extra join has to be used where 'dept_emp'//
# acts as a bridge between employees and departments
        JOIN
        employees e ON s.emp_no = e.emp_no
        JOIN
        dept_emp dm ON e.emp_no = dm.emp_no
        JOIN
        departments d ON dm.dept_no = d.dept_no

# Grouping by 'gender' and 'dept_name' so we can analyze average salary by gender and department
GROUP BY e.gender, d.dept_name;

### QUERY 2 ### This set of queries was utimately loaded into a Tableau dashboard. The link is in the comments

# PART 1
#Selecting a count of the employees in each title to see the composition of the comapny
SELECT t.title, count(e.emp_no) AS Employee_Count
FROM
#Join employees and title together using the PK 'emp_no'
    employees e
        JOIN
        titles t ON e.emp_no = t.emp_no

# We ultimately want the pie chart to show counts by department, so we will group by 't.titles'
GROUP BY t.title;

# PART 2
#Selecting title, gender, and average salary to analyze difference in pay between men and women
SELECT t.title, ROUND(AVG(s.salary),2) AS Average_Salary, e.gender
FROM 
# Joining employees to salaries and titles to "merge" the tables	
    employees e
		JOIN
		titles t ON e.emp_no = t.emp_no
        JOIN
        salaries s ON t.emp_no = s.emp_no

# Since we want to look at pay based on gender and title, we will group by gender and title
GROUP BY t.title, e.gender;

# PART 3
#Select the year of the hire date, title, and count of employees to get a breakdown of which departments were hiring at what time.//
#This can provide insights into the experience level of different departments
SELECT YEAR(e.hire_date) AS Year_Hired, t.title, COUNT(e.emp_no) AS Employee_Count
FROM
	employees e
    JOIN
    titles t ON e.emp_no = t.emp_no

# The area chart will show the amount of hires of each department per year. The company has significantly decreased hiring.//
# This suggests that there is little turnover in the company has they have no need to bring in new people.
GROUP BY t.title, YEAR(Hire_Date);

### QUERY 3 ###

DROP PROCEDURE emp_lookup;
DELIMITER $$
CREATE PROCEDURE emp_lookup(IN p_emp_no INTEGER, OUT p_dept_name VARCHAR(30), OUT p_hire_date DATE)
BEGIN
# I'm selecting dept. name and hire date to insert them into the output using 'INTO'
# Selecting the maximum hire date to retrieve their latest/current contract

SELECT d.dept_name, MAX(hire_date) AS Hire_Date
INTO p_dept_name, p_hire_date FROM
departments d
#Once again using 'dept_emp' to easily join 'employees' and 'departments'	
    JOIN
	dept_emp dm ON d.dept_no = dm.dept_no
	JOIN
	employees e ON dm.emp_no = e.emp_no
WHERE

#Associating the employee number with the IN parameter
e.emp_no = p_emp_no 

#Specifying that only one result should be returned
LIMIT 1;

END $$

DELIMITER ;

### QUERY 4 ###

DELIMITER $$ 
# Creating a trigger to make sure erroneous dates are not inserted into the database
# If the inserted date is greater than the system date, it will change it to the system (todays) date

CREATE TRIGGER check_date
BEFORE INSERT ON employees FOR EACH ROW

#The if statement is contained here as to say "If x happens, then Y"
BEGIN
	IF NEW.hire_date > sysdate() THEN
		SET NEW.hire_date = sysdate();
	END IF;
END $$

DELIMITER ;

### QUERY 5 ###
COMMIT;
DROP FUNCTION f_max_salary;
DELIMITER $$

CREATE FUNCTION f_max_salary (p_emp_no INTEGER) RETURNS DECIMAL(10,2)
DETERMINISTIC

BEGIN

DECLARE v_max_salary DECIMAL(10,2);

SELECT
	MAX(s.salary)
INTO v_max_salary

FROM
	salaries s
		JOIN
	employees e ON e.emp_no = s.emp_no;

#WHERE e.emp_no = p_emp_no;

RETURN v_max_salary;

END$$

DELIMITER ;

SELECT f_max_salary(11356);
